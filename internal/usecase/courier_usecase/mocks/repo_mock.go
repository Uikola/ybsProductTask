// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Uikola/ybsProductTask/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// CreateCouriers provides a mock function with given fields: ctx, couriers
func (_m *MockRepo) CreateCouriers(ctx context.Context, couriers []entity.Courier) error {
	ret := _m.Called(ctx, couriers)

	if len(ret) == 0 {
		panic("no return value specified for CreateCouriers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Courier) error); ok {
		r0 = rf(ctx, couriers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_CreateCouriers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCouriers'
type MockRepo_CreateCouriers_Call struct {
	*mock.Call
}

// CreateCouriers is a helper method to define mock.On call
//   - ctx context.Context
//   - couriers []entity.Courier
func (_e *MockRepo_Expecter) CreateCouriers(ctx interface{}, couriers interface{}) *MockRepo_CreateCouriers_Call {
	return &MockRepo_CreateCouriers_Call{Call: _e.mock.On("CreateCouriers", ctx, couriers)}
}

func (_c *MockRepo_CreateCouriers_Call) Run(run func(ctx context.Context, couriers []entity.Courier)) *MockRepo_CreateCouriers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.Courier))
	})
	return _c
}

func (_c *MockRepo_CreateCouriers_Call) Return(_a0 error) *MockRepo_CreateCouriers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_CreateCouriers_Call) RunAndReturn(run func(context.Context, []entity.Courier) error) *MockRepo_CreateCouriers_Call {
	_c.Call.Return(run)
	return _c
}

// GetCourier provides a mock function with given fields: ctx, courierID
func (_m *MockRepo) GetCourier(ctx context.Context, courierID int) (entity.Courier, error) {
	ret := _m.Called(ctx, courierID)

	if len(ret) == 0 {
		panic("no return value specified for GetCourier")
	}

	var r0 entity.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Courier, error)); ok {
		return rf(ctx, courierID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Courier); ok {
		r0 = rf(ctx, courierID)
	} else {
		r0 = ret.Get(0).(entity.Courier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetCourier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCourier'
type MockRepo_GetCourier_Call struct {
	*mock.Call
}

// GetCourier is a helper method to define mock.On call
//   - ctx context.Context
//   - courierID int
func (_e *MockRepo_Expecter) GetCourier(ctx interface{}, courierID interface{}) *MockRepo_GetCourier_Call {
	return &MockRepo_GetCourier_Call{Call: _e.mock.On("GetCourier", ctx, courierID)}
}

func (_c *MockRepo_GetCourier_Call) Run(run func(ctx context.Context, courierID int)) *MockRepo_GetCourier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRepo_GetCourier_Call) Return(_a0 entity.Courier, _a1 error) *MockRepo_GetCourier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetCourier_Call) RunAndReturn(run func(context.Context, int) (entity.Courier, error)) *MockRepo_GetCourier_Call {
	_c.Call.Return(run)
	return _c
}

// GetCouriers provides a mock function with given fields: ctx, offset, limit
func (_m *MockRepo) GetCouriers(ctx context.Context, offset int, limit int) ([]entity.Courier, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCouriers")
	}

	var r0 []entity.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Courier, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Courier); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetCouriers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCouriers'
type MockRepo_GetCouriers_Call struct {
	*mock.Call
}

// GetCouriers is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *MockRepo_Expecter) GetCouriers(ctx interface{}, offset interface{}, limit interface{}) *MockRepo_GetCouriers_Call {
	return &MockRepo_GetCouriers_Call{Call: _e.mock.On("GetCouriers", ctx, offset, limit)}
}

func (_c *MockRepo_GetCouriers_Call) Run(run func(ctx context.Context, offset int, limit int)) *MockRepo_GetCouriers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockRepo_GetCouriers_Call) Return(_a0 []entity.Courier, _a1 error) *MockRepo_GetCouriers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetCouriers_Call) RunAndReturn(run func(context.Context, int, int) ([]entity.Courier, error)) *MockRepo_GetCouriers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
