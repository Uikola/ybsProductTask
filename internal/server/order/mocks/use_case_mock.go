// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Uikola/ybsProductTask/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// CompleteOrder provides a mock function with given fields: ctx, completeInfo
func (_m *MockUseCase) CompleteOrder(ctx context.Context, completeInfo entity.CompleteOrderInfo) (int, error) {
	ret := _m.Called(ctx, completeInfo)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOrder")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CompleteOrderInfo) (int, error)); ok {
		return rf(ctx, completeInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CompleteOrderInfo) int); ok {
		r0 = rf(ctx, completeInfo)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CompleteOrderInfo) error); ok {
		r1 = rf(ctx, completeInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CompleteOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteOrder'
type MockUseCase_CompleteOrder_Call struct {
	*mock.Call
}

// CompleteOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - completeInfo entity.CompleteOrderInfo
func (_e *MockUseCase_Expecter) CompleteOrder(ctx interface{}, completeInfo interface{}) *MockUseCase_CompleteOrder_Call {
	return &MockUseCase_CompleteOrder_Call{Call: _e.mock.On("CompleteOrder", ctx, completeInfo)}
}

func (_c *MockUseCase_CompleteOrder_Call) Run(run func(ctx context.Context, completeInfo entity.CompleteOrderInfo)) *MockUseCase_CompleteOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CompleteOrderInfo))
	})
	return _c
}

func (_c *MockUseCase_CompleteOrder_Call) Return(_a0 int, _a1 error) *MockUseCase_CompleteOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CompleteOrder_Call) RunAndReturn(run func(context.Context, entity.CompleteOrderInfo) (int, error)) *MockUseCase_CompleteOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrders provides a mock function with given fields: ctx, orders
func (_m *MockUseCase) CreateOrders(ctx context.Context, orders []entity.Order) error {
	ret := _m.Called(ctx, orders)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Order) error); ok {
		r0 = rf(ctx, orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_CreateOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrders'
type MockUseCase_CreateOrders_Call struct {
	*mock.Call
}

// CreateOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - orders []entity.Order
func (_e *MockUseCase_Expecter) CreateOrders(ctx interface{}, orders interface{}) *MockUseCase_CreateOrders_Call {
	return &MockUseCase_CreateOrders_Call{Call: _e.mock.On("CreateOrders", ctx, orders)}
}

func (_c *MockUseCase_CreateOrders_Call) Run(run func(ctx context.Context, orders []entity.Order)) *MockUseCase_CreateOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.Order))
	})
	return _c
}

func (_c *MockUseCase_CreateOrders_Call) Return(_a0 error) *MockUseCase_CreateOrders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_CreateOrders_Call) RunAndReturn(run func(context.Context, []entity.Order) error) *MockUseCase_CreateOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderID
func (_m *MockUseCase) GetOrder(ctx context.Context, orderID int) (entity.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockUseCase_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int
func (_e *MockUseCase_Expecter) GetOrder(ctx interface{}, orderID interface{}) *MockUseCase_GetOrder_Call {
	return &MockUseCase_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderID)}
}

func (_c *MockUseCase_GetOrder_Call) Run(run func(ctx context.Context, orderID int)) *MockUseCase_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUseCase_GetOrder_Call) Return(_a0 entity.Order, _a1 error) *MockUseCase_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetOrder_Call) RunAndReturn(run func(context.Context, int) (entity.Order, error)) *MockUseCase_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, offset, limit
func (_m *MockUseCase) GetOrders(ctx context.Context, offset int, limit int) ([]entity.Order, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Order, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Order); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type MockUseCase_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
func (_e *MockUseCase_Expecter) GetOrders(ctx interface{}, offset interface{}, limit interface{}) *MockUseCase_GetOrders_Call {
	return &MockUseCase_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, offset, limit)}
}

func (_c *MockUseCase_GetOrders_Call) Run(run func(ctx context.Context, offset int, limit int)) *MockUseCase_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUseCase_GetOrders_Call) Return(_a0 []entity.Order, _a1 error) *MockUseCase_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetOrders_Call) RunAndReturn(run func(context.Context, int, int) ([]entity.Order, error)) *MockUseCase_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
