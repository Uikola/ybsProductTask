// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	courier_usecase "github.com/Uikola/ybsProductTask/internal/usecase/courier_usecase"

	entity "github.com/Uikola/ybsProductTask/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// CreateCouriers provides a mock function with given fields: ctx, couriers
func (_m *MockUseCase) CreateCouriers(ctx context.Context, couriers []entity.Courier) error {
	ret := _m.Called(ctx, couriers)

	if len(ret) == 0 {
		panic("no return value specified for CreateCouriers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Courier) error); ok {
		r0 = rf(ctx, couriers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_CreateCouriers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCouriers'
type MockUseCase_CreateCouriers_Call struct {
	*mock.Call
}

// CreateCouriers is a helper method to define mock.On call
//   - ctx context.Context
//   - couriers []entity.Courier
func (_e *MockUseCase_Expecter) CreateCouriers(ctx interface{}, couriers interface{}) *MockUseCase_CreateCouriers_Call {
	return &MockUseCase_CreateCouriers_Call{Call: _e.mock.On("CreateCouriers", ctx, couriers)}
}

func (_c *MockUseCase_CreateCouriers_Call) Run(run func(ctx context.Context, couriers []entity.Courier)) *MockUseCase_CreateCouriers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.Courier))
	})
	return _c
}

func (_c *MockUseCase_CreateCouriers_Call) Return(_a0 error) *MockUseCase_CreateCouriers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_CreateCouriers_Call) RunAndReturn(run func(context.Context, []entity.Courier) error) *MockUseCase_CreateCouriers_Call {
	_c.Call.Return(run)
	return _c
}

// GetCourier provides a mock function with given fields: ctx, courierID
func (_m *MockUseCase) GetCourier(ctx context.Context, courierID int) (entity.Courier, error) {
	ret := _m.Called(ctx, courierID)

	if len(ret) == 0 {
		panic("no return value specified for GetCourier")
	}

	var r0 entity.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Courier, error)); ok {
		return rf(ctx, courierID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Courier); ok {
		r0 = rf(ctx, courierID)
	} else {
		r0 = ret.Get(0).(entity.Courier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetCourier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCourier'
type MockUseCase_GetCourier_Call struct {
	*mock.Call
}

// GetCourier is a helper method to define mock.On call
//   - ctx context.Context
//   - courierID int
func (_e *MockUseCase_Expecter) GetCourier(ctx interface{}, courierID interface{}) *MockUseCase_GetCourier_Call {
	return &MockUseCase_GetCourier_Call{Call: _e.mock.On("GetCourier", ctx, courierID)}
}

func (_c *MockUseCase_GetCourier_Call) Run(run func(ctx context.Context, courierID int)) *MockUseCase_GetCourier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUseCase_GetCourier_Call) Return(_a0 entity.Courier, _a1 error) *MockUseCase_GetCourier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetCourier_Call) RunAndReturn(run func(context.Context, int) (entity.Courier, error)) *MockUseCase_GetCourier_Call {
	_c.Call.Return(run)
	return _c
}

// GetCouriers provides a mock function with given fields: ctx, dto
func (_m *MockUseCase) GetCouriers(ctx context.Context, dto courier_usecase.GetCouriersDTO) ([]entity.Courier, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for GetCouriers")
	}

	var r0 []entity.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, courier_usecase.GetCouriersDTO) ([]entity.Courier, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, courier_usecase.GetCouriersDTO) []entity.Courier); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, courier_usecase.GetCouriersDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetCouriers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCouriers'
type MockUseCase_GetCouriers_Call struct {
	*mock.Call
}

// GetCouriers is a helper method to define mock.On call
//   - ctx context.Context
//   - dto courier_usecase.GetCouriersDTO
func (_e *MockUseCase_Expecter) GetCouriers(ctx interface{}, dto interface{}) *MockUseCase_GetCouriers_Call {
	return &MockUseCase_GetCouriers_Call{Call: _e.mock.On("GetCouriers", ctx, dto)}
}

func (_c *MockUseCase_GetCouriers_Call) Run(run func(ctx context.Context, dto courier_usecase.GetCouriersDTO)) *MockUseCase_GetCouriers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(courier_usecase.GetCouriersDTO))
	})
	return _c
}

func (_c *MockUseCase_GetCouriers_Call) Return(_a0 []entity.Courier, _a1 error) *MockUseCase_GetCouriers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetCouriers_Call) RunAndReturn(run func(context.Context, courier_usecase.GetCouriersDTO) ([]entity.Courier, error)) *MockUseCase_GetCouriers_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetaInfo provides a mock function with given fields: ctx, dto
func (_m *MockUseCase) GetMetaInfo(ctx context.Context, dto courier_usecase.GetMetaInfoDTO) (entity.CourierMeta, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for GetMetaInfo")
	}

	var r0 entity.CourierMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, courier_usecase.GetMetaInfoDTO) (entity.CourierMeta, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, courier_usecase.GetMetaInfoDTO) entity.CourierMeta); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(entity.CourierMeta)
	}

	if rf, ok := ret.Get(1).(func(context.Context, courier_usecase.GetMetaInfoDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetMetaInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetaInfo'
type MockUseCase_GetMetaInfo_Call struct {
	*mock.Call
}

// GetMetaInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - dto courier_usecase.GetMetaInfoDTO
func (_e *MockUseCase_Expecter) GetMetaInfo(ctx interface{}, dto interface{}) *MockUseCase_GetMetaInfo_Call {
	return &MockUseCase_GetMetaInfo_Call{Call: _e.mock.On("GetMetaInfo", ctx, dto)}
}

func (_c *MockUseCase_GetMetaInfo_Call) Run(run func(ctx context.Context, dto courier_usecase.GetMetaInfoDTO)) *MockUseCase_GetMetaInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(courier_usecase.GetMetaInfoDTO))
	})
	return _c
}

func (_c *MockUseCase_GetMetaInfo_Call) Return(_a0 entity.CourierMeta, _a1 error) *MockUseCase_GetMetaInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetMetaInfo_Call) RunAndReturn(run func(context.Context, courier_usecase.GetMetaInfoDTO) (entity.CourierMeta, error)) *MockUseCase_GetMetaInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
